:title: Gut Reaction
:date: 2012-01-21

.. raw:: html

    I've always preferred working on the backend of applications, especially web apps. This stems from my lack of confidence in trying to make functional, and pretty, interfaces. This had lead to, by proxy, a strong dislike of <a href="http://en.wikipedia.org/wiki/Javascript">JavaScript</a>. Over time I had come to dislike it less, especially with things like <a href="http://jquery.com/">jQuery </a>to make the <a href="http://en.wikipedia.org/wiki/Document_Object_Model">DOM</a> less painful to work with.<br /><br />This recently changed when I started using <a href="http://nodejs.org/">Node</a> for little projects here and there. It gave me access to the <a href="http://en.wikipedia.org/wiki/Reactor_pattern">reactor pattern</a> without having to convolute the syntax of a language I like, such as what <a href="http://twistedmatrix.com/trac/">Twisted </a>does to <a href="http://python.org/">Python</a>. It took me a couple weeks to find a project that I could start using Node for, the answer was an <a href="http://en.wikipedia.org/wiki/Internet_Relay_Chat">IRC</a> bot that I have named <a href="https://github.com/wraithan/zenircbot">ZenIRCBot</a>.<br /><br />The design of this bot takes the reactor pattern to heart. Using an asynchronous IRC library called <a href="https://github.com/martynsmith/node-irc">node-irc</a> to connect and manage its IRC session it connects and provides me with various events I can listen for and react to. But that is just the core bot, it just takes whatever messages it sees and puts them in a <a href="http://redis.io/">Redis</a> <a href="http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">pub/sub channel</a>.<br /><br />This allows the core bot to remain very simple and just implement a <a href="http://zenircbot.readthedocs.org/en/latest/services.html#writing-your-own">protocol</a> that I have come up with. Then I have services that implement the protocol as well but run as separate processes. This allows me to add or remove functionality to the bot without ever having to log the bot out or restart it. This makes development of services rather rapid as I can write the service, start it, test it, edit it, restart it, and not have to wait for the time it takes the bot to do a full connection.<br /><br />This also leads to the ability to write services (or in as <a href="http://ericholscher.com/">Eric Holscher</a> did, <a href="https://github.com/wraithan/zenircbot/blob/master/bot.py">the core bot</a>) in any language, as long as it implements the protocol. Letting anyone who knows at least one programing language that is listed on <a href="http://redis.io/clients">this list</a> or can implement a Redis client for the language they are using, can use and contribute to this bot.<br /><br />The end result of all of this is that I have a new found like for JavaScript, and got better at some skills like using the reactor pattern. If you haven't tried Node out, I strongly suggest you go play with it, maybe write a service or two for my bot while you're at it!